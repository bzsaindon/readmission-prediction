pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 3,
nrounds = 49 ,
objective = "binary:logistic",
eval.metric = "auc",
metrics = list("rmse", "auc"))
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 4,
nrounds = 49 ,
objective = "binary:logistic",
eval.metric = "auc",
metrics = list("rmse", "auc"))
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
bst <- xgb.cv(data = sparse_matrix_all_data,
label = output_vector_all_data,
max_depth = 4,
nfold = 10,
nrounds = 49 ,
objective = "binary:logistic",
metrics = list("rmse", "auc"))
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
bst <- xgb.cv(data = sparse_matrix_all_data,
label = output_vector_all_data,
max_depth = 4,
nfold = 10,
nrounds = 49 ,
objective = "binary:logistic",
metrics = list("auc"))
print(cv, verbose=TRUE)
cv <- xgb.cv(data = sparse_matrix_all_data,
label = output_vector_all_data,
max_depth = 4,
nfold = 10,
nrounds = 49 ,
objective = "binary:logistic",
metrics = list("auc"))
print(cv, verbose=TRUE)
xgb.save(cv, "/Users/briansaindon/Desktop/ableto/results/model/xgboost/")
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 4,
nrounds = 49 ,
objective = "binary:logistic",
eval.metric = "auc")
# Compute AUC for predicting Class with the model
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
xgb.save(bst, "/Users/briansaindon/Desktop/ableto/results/model/xgboost/model1")
xgb.save(bst, "/Users/briansaindon/Desktop/ableto/results/model/")
xgb.save(bst, "/Users/briansaindon/Desktop/ableto/results/model")
xgb.save(bst,"/Users/briansaindon/Desktop/ableto/results/model.R")
xgb.save(bst,"/Users/briansaindon/Desktop/ableto/results/xgb.model")
xgb.save(cv, "/Users/briansaindon/Desktop/ableto/results/model/xgboost/cv.model")
cv <- xgb.cv(data = sparse_matrix_all_data,
label = output_vector_all_data,
max_depth = 4,
nfold = 10,
nrounds = 49 ,
objective = "binary:logistic",
metrics = list("auc"))
print(cv)
print(cv, verbose=TRUE)
cv$params
cv$evaluation_log
cv$call
cv$folds
cv$control
cv <- xgb.cv(data = sparse_matrix_all_data,
label = output_vector_all_data,
max_depth = 4,
nfold = 10,
nrounds = 49 ,
objective = "binary:logistic",
metrics = list("auc"))
cv <- xgb.cv(data = sparse_matrix_all_data,
label = output_vector_all_data,
max_depth = 4,
nfold = 10,
nrounds = 49 ,
min_child_weight = 1,
objective = "binary:logistic",
metrics = list("auc"))
cv <- xgb.cv(data = sparse_matrix_all_data,
label = output_vector_all_data,
max_depth = 4,
nfold = 10,
nrounds = 49 ,
min_child_weight = 3,
objective = "binary:logistic",
metrics = list("auc"))
cv <- xgb.cv(data = sparse_matrix_all_data,
label = output_vector_all_data,
max_depth = 4,
nfold = 10,
nrounds = 49 ,
objective = "binary:logistic",
scale_pos_weight = 1,
metrics = list("auc"))
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 4,
nrounds = 49 ,
objective = "binary:logistic",
eval.metric = "auc",
gamma = 0)
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 4,
nrounds = 49 ,
objective = "binary:logistic",
eval.metric = "auc",
gamma = 0, scale_pos_weight = 1)
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 4,
nrounds = 49 ,
objective = "binary:logistic",
eval.metric = "auc",
gamma = 0, scale_pos_weight = 3)
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 4,
nrounds = 49 ,
objective = "binary:logistic",
eval.metric = "auc",
gamma = 0, scale_pos_weight = .5)
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 4,
nrounds = 49 ,
objective = "binary:logistic",
eval.metric = "auc",
gamma = 0, scale_pos_weight = 10)
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 4,
nrounds = 49 ,
objective = "binary:logistic",
eval.metric = "auc")
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
bst <- xgboost(data = sparse_matrix_train,
label = output_vector_train,
max_depth = 4,
num_parallel_tree = 1000,
subsample = 0.5,
colsample_bytree =0.5,
nrounds = 10,
eval.metric = "logloss",
eval.metric = "error",
objective = "binary:logistic")
install.packages("cv.glm")
(cv.err.6 <- cv.glm(model.data.reduced, logit.overall1, K = 6)$delta)
install.packages("boot")
library(boot)
(cv.err.6 <- cv.glm(model.data.reduced, logit.overall1, K = 6)$delta)
classes <- model.data.reduced[, "readmitted_dv"]
predictors <- model.data.reduced[, -match(c("readmitted_dv"), colnames(model.data.reduced))]
classes <- model.data.reduced[, "readmitted_dv"]
predictors <- model.data.reduced[, -match(c("readmitted_dv"), colnames(model.data.reduced))]
train_set <- createDataPartition(classes, p = 0.8, list = FALSE)
str(train_set)
train_predictors <- predictors[train_set, ]
train_classes <- classes[train_set]
test_predictors <- predictors[-train_set, ]
test_classes <- classes[-train_set]
set.seed(seed)
cv_splits <- createFolds(classes, k = 10, returnTrain = TRUE)
str(cv_splits)
set.seed(0)
cv_splits <- createFolds(classes, k = 10, returnTrain = TRUE)
str(cv_splits)
cv <- xgb.cv(data = sparse_matrix_all_data,
label = output_vector_all_data,
max_depth = 4,
nfold = 10,
nrounds = 49 ,
objective = "binary:logistic",
metrics = list("auc"))
require(glmnet)
install.packages("glmnet")
require(glmnet)
set.seed(0)
cs_data_train <- model.data.reduced[train_set, ]
cs_data_test <- model.data.reduced[-train_set, ]
glmnet_grid <- expand.grid(alpha = c(0,  .1,  .2, .4, .6, .8, 1),
lambda = seq(.01, .2, length = 20))
glmnet_ctrl <- trainControl(method = "cv", number = 10)
glmnet_fit <- train(Status ~ ., data = cs_data_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneGrid = glmnet_grid,
trControl = glmnet_ctrl)
glmnet_fit <- train(readmitted_dv ~ ., data = cs_data_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneGrid = glmnet_grid,
trControl = glmnet_ctrl)
glmnet_fit
trellis.par.set(caretTheme())
plot(glmnet_fit, scales = list(x = list(log = 2)))
pred_classes <- predict(glmnet_fit, newdata = cs_data_test)
table(pred_classes)
pred_probs <- predict(glmnet_fit, newdata = cs_data_test, type = "prob")
head(pred_probs)
pred_classes <- predict(glmnet_fit, newdata = cs_data_test)
bst2 <- xgb.load("/Users/briansaindon/Desktop/ableto/results/model/xgb.model")
model.data <- readRDS(file = "/Users/briansaindon/Desktop/ableto/derived_variables/model.data.rds")
model.data.reduced <-  model.data[ c(3, 5, 7, 9, 11, 14, 15, 18, 19, 35, 41, 43, 44, 51, 56, 57, 58, 61, 63, 64, 65, 66, 70, 72, 73, 75, 76, 80, 81, 82, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 101, 103, 105, 107, 108, 109, 113, 114, 118, 119, 121
) ]
model.data.reduced[is.na(model.data.reduced)] <- 0
set.seed(3456)
trainIndex <- createDataPartition(model.data.reduced$readmitted_dv, p = .80,
list = FALSE,
times = 1)
head(trainIndex)
model1train <- model.data.reduced[ trainIndex,]
model1test  <- model.data.reduced[-trainIndex,]
pred2 <- predict(bst2, model1test)
pred2 <- predict(bst2, sparse_matrix_test)
saveRDS(logit.overall1, "/Users/briansaindon/Desktop/ableto/results/model/lr-model.rds")
lr <- readRDS("/Users/briansaindon/Desktop/ableto/results/model/lr-model.rds")
prob <- predict(lr, newdata=model1test, type="response")
testxg<-as.data.frame(pred2)
testlr<-as.data.frame(prob)
View(testlr)
View(testxg)
View(testlr)
test$dv<-model1test$readmitted_dv
test$lrprob<-testlr
test$xgprob<-testxg
View(test)
temp <- test %>% mutate(decile_lr = ntile(lrprob, 10), decile_xg = ntile(xgprob, 10))
grp <- group_by(temp, decile)
grp <- group_by(temp, decile_lr)
average_pobability<-summarise(grp, meanrisk_lr=mean(lrprob), meanactual=mean(dv))
View(grp)
temp <- test %>% mutate(decile_lr = ntile(lrprob, 10))
grp <- group_by(temp, decile_lr)
average_pobability<-summarise(grp, meanrisk_lr=mean(lrprob), meanactual=mean(dv))
test<-as.data.frame(prob)
test$dv<-model1test$readmitted_dv
temp <- test %>% mutate(decile = ntile(prob, 10))
grp <- group_by(temp, decile)
average_pobability<-summarise(grp, meanrisk=mean(prob), meanactual=mean(dv))
temp$riskcategory <- ifelse(temp$decile<=2,"HIGH",
ifelse(temp$decile<=7,"MEDIUM","LOW"));
View(temp)
grp <-
average_pobability<- temp %>%
group_by(decile) %>%
summarise(grp, meanrisk=mean(prob), meanactual=mean(dv))
temp <- test %>% mutate(decile = ntile(prob, 10))
grp <-
average_pobability<- temp %>%
group_by(decile) %>%
summarise(grp, meanrisk=mean(prob), meanactual=mean(dv))
test<-as.data.frame(prob)
test$dv<-model1test$readmitted_dv
temp <- test %>% mutate(decile = ntile(prob, 10))
grp <-
average_pobability<- temp %>%
group_by(decile) %>%
summarise(grp, meanrisk=mean(prob), meanactual=mean(dv))
grp <-
average_pobability<- temp %>%
group_by(decile) %>%
summarise(meanrisk=mean(prob), meanactual=mean(dv))
View(average_pobability)
test<-as.data.frame(prob)
test$dv<-model1test$readmitted_dv
temp <- test %>% mutate(decile = ntile(prob, 10))
grp <-
average_pobability<- temp %>%
group_by(decile) %>%
summarise(meanrisk=mean(prob), meanactual=mean(dv))
test<-as.data.frame(prob)
test$dv<-model1test$readmitted_dv
temp <- test %>% mutate(decile = ntile(prob, 10))
average_pobability<- temp %>%
group_by(decile) %>%
summarise(meanrisk=mean(prob), meanactual=mean(dv))
temp <- test %>% mutate(decile = ntile(prob, 10))
grp <- group_by(temp, decile)
average_pobability<-summarise(grp, mean=mean(prob))
average_pobability<- temp %>%
group_by(decile) %>%
summarise(meanrisk=mean(prob), meanactual=mean(dv))
install.packages("gmodels")
library(gmodels)
oddschi <- performance(pred, measure = "odds", x.measure = "chisq")
sensspec<- performance(pred, measure = "sens", x.measure = "spec")
liftcharts<- performance(pred, measure = "lift", x.measure = "rpp")
precrecall<- performance(pred, measure = "prec", x.measure = "rec")
plot(precrecall)
plot(sensspec)
plot(liftcharts)
plot(liftcharts)
prob <- predict(bst, sparse_matrix_test)#predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
require(caret)
require(dplyr)
model.data <- readRDS(file = "/Users/briansaindon/Desktop/ableto/derived_variables/model.data.rds")
lr <- readRDS("/Users/briansaindon/Desktop/ableto/results/model/lr-model.rds")
model.data <- readRDS(file = "/Users/briansaindon/Desktop/ableto/derived_variables/model.data.rds")
model.data.reduced <-  model.data[ c(3, 5, 7, 9, 11, 14, 15, 18, 19, 35, 41, 43, 44, 51, 56, 57, 58, 61, 63, 64, 65, 66, 70, 72, 73, 75, 76, 80, 81, 82, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 101, 103, 105, 107, 108, 109, 113, 114, 118, 119, 121
) ]
model.data.reduced[is.na(model.data.reduced)] <- 0
set.seed(3456)
trainIndex <- createDataPartition(model.data.reduced$readmitted_dv, p = .80,
list = FALSE,
times = 1)
head(trainIndex)
model1train <- model.data.reduced[ trainIndex,]
model1test  <- model.data.reduced[-trainIndex,]
# Convert to Data Frame to Matrix
sparse_matrix_train <- sparse.model.matrix(readmitted_dv~.-1, data = model1train)
output_vector_train = model1train[,"readmitted_dv"] == 1
sparse_matrix_test <- sparse.model.matrix(readmitted_dv~.-1, data = model1test)
output_vector_test = model1test[,"readmitted_dv"] == 1
sparse_matrix_all_data <- sparse.model.matrix(readmitted_dv~.-1, data = model.data.reduced)
output_vector_all_data = model.data.reduced[,"readmitted_dv"] == 1
bst2 <- xgb.load("/Users/briansaindon/Desktop/ableto/results/model/xgb.model")
library(ROCR)
require(caret)
require(dplyr)
require(xgboost)
require(Matrix)
require(data.table)
if (!require('vcd')) install.packages('vcd')
bst2 <- xgb.load("/Users/briansaindon/Desktop/ableto/results/model/xgb.model")
pred2 <- predict(bst2, sparse_matrix_test)
sparse_matrix_train <- sparse.model.matrix(readmitted_dv~.-1, data = model1train)
output_vector_train = model1train[,"readmitted_dv"] == 1
sparse_matrix_test <- sparse.model.matrix(readmitted_dv~.-1, data = model1test)
output_vector_test = model1test[,"readmitted_dv"] == 1
sparse_matrix_all_data <- sparse.model.matrix(readmitted_dv~.-1, data = model.data.reduced)
output_vector_all_data = model.data.reduced[,"readmitted_dv"] == 1
pred2 <- predict(bst2, sparse_matrix_test)
lr <- readRDS("/Users/briansaindon/Desktop/ableto/results/model/lr-model.rds")
prob <- predict(lr, newdata=model1test, type="response")
bst_predictions <- predict(bst2, sparse_matrix_test)
lr_predictions <- predict(lr, newdata=model1test, type="response")
class(lr_predictions)
df<-data.frame((bst_predictions, lr_predictions))
df<-data.frame(melt(bst_predictions, lr_predictions))
colnames(df) <- c(xgb, lr)
colnames(df) <- c(xgb, lr)
colnames(df) <- c(xgb_pred, lr)
colnames(df) <- c("xgb_pred", "lr_pred")
View(df)
df<-data.frame(melt(bst_predictions, lr_predictions))
df<-data.frame(cbind(bst_predictions, lr_predictions))
View(df)
df<-data.frame(cbind(bst_predictions, lr_predictions, model1test$readmitted_dv))
View(df)
colnames(df) <- c("xgb_pred", "lr_pred", "dv")
View(df)
df_tmp <- df %>% mutate(decile_lr = ntile(lr_pred, 10))
View(df_tmp)
df_tmp <- df %>% mutate(decile_lr = ntile(lr_pred, 10), decile_xgb = ntile(xgb_pred, 10))
df <- df %>% mutate(decile_lr = ntile(lr_pred, 10), decile_xgb = ntile(xgb_pred, 10))
df <- df %>% mutate(decile_lr = ntile(lr_pred, -10), decile_xgb = ntile(xgb_pred, 10))
df <- df %>% mutate(decile_lr = ntile(lr_pred, 10), decile_xgb = ntile(xgb_pred, 10))
with(df, tapply(lr_pred, list(decile_lr=decile_lr,decile_xgb=decile_xgb), mean) )
with(df, tapply(dv, list(decile_lr=decile_lr,decile_xgb=decile_xgb), mean) )
df$avg_prob<- ave(df$lr_pred, df$xgb_pred)
with(df, tapply(avg_prob, list(decile_lr=decile_lr,decile_xgb=decile_xgb), mean) )
df$avg_prob<- (df$lr_pred +  df$xgb_pred)/2
with(df, tapply(dv, list(decile_lr=decile_lr,decile_xgb=decile_xgb), mean) )
with(df, tapply(avg_prob, list(decile_lr=decile_lr,decile_xgb=decile_xgb), mean) )
grp <- group_by(df, decile_lr)
average_pobability<-summarise(grp, meanrisk_lr=mean(lrprob), meanactual=mean(dv))
average_pobability<-summarise(grp, meanrisk_lr=mean(lr_pred), meanactual=mean(dv))
View(average_pobability)
average_pobability_lr<-summarise(grp, meanrisk_lr=mean(lr_pred)*100, meanactual=mean(dv)*100)
grp <- group_by(df, decile_xgb)
average_pobability_xgb<-summarise(grp, meanrisk_xgb=mean(xgb_pred)*100, meanactual=mean(dv)*100)
View(average_pobability_xgb)
average_pobability_xgb<-summarise(grp, round(meanrisk_xgb=mean(xgb_pred)*100, 2), meanactual=mean(dv)*100)
average_pobability_xgb<-summarise(grp, meanrisk_xgb=round(mean(xgb_pred)*100, 2), meanactual=mean(dv)*100)
average_pobability_xgb<-summarise(grp, meanrisk_xgb=round(mean(xgb_pred)*100, 2), meanactual=round(mean(dv)*100, 2)
temp$riskcategory <- ifelse(temp$decile<=2,"HIGH",
ifelse(temp$decile<=7,"MEDIUM","LOW"));
average_pobability_xgb<-summarise(grp, meanrisk_xgb=round(mean(xgb_pred)*100, 2), meanactual=round(mean(dv)*100, 2))
average_pobability_lr<-summarise(grp, meanrisk_lr=round(mean(lr_pred)*100, 2), meanactual=round(mean(dv)*100, 2))
grp <- group_by(df, decile_xgb)
average_pobability_xgb<-summarise(grp, meanrisk_xgb=round(mean(xgb_pred)*100, 2), meanactual=round(mean(dv)*100, 2))
View(average_pobability_lr)
with(df, tapply(avg_prob, list(decile_lr=decile_lr,decile_xgb=decile_xgb), mean) )
with(df, tapply(dv, list(decile_lr=decile_lr,decile_xgb=decile_xgb), mean) )
table(df$)
table(df$dv)
1252/12746
df$riskcategory <- ifelse(df$decile_xgb>=8 || df$decile_xgb>=8,"HIGH","LOW");
table(df$riskcategory, df$dv)
df$riskcategory <- ifelse(df$decile_xgb>=8 | df$decile_lr>=8,"HIGH","LOW");
table(df$riskcategory, df$dv)
df$riskcategory <- ifelse(df$decile_xgb>=8 & df$decile_lr>=8,"HIGH","LOW");
table(df$riskcategory, df$dv)
cross_tab<-with(df, tapply(dv, list(decile_lr=decile_lr,decile_xgb=decile_xgb), mean) )
View(cross_tab)
write.csv(cross_tab, "/Users/briansaindon/Desktop/ableto/results/scored")
write.csv(cross_tab, "/Users/briansaindon/Desktop/ableto/results/scored/cross_tab.csv")
write.csv(average_pobability_lr, "/Users/briansaindon/Desktop/ableto/results/scored/avg_prob_lr.csv")
write.csv(average_pobability_xgb, "/Users/briansaindon/Desktop/ableto/results/scored/avg_prob_xgb.csv")
View(df)
View(average_pobability)
View(average_pobability_lr)
write.csv(average_pobability_lr, "/Users/briansaindon/Desktop/ableto/results/scored/avg_prob_lr.csv")
write.csv(average_pobability_xgb, "/Users/briansaindon/Desktop/ableto/results/scored/avg_prob_xgb.csv")
average_pobability_lr<-summarise(grp, meanrisk_lr=round(mean(lr_pred)*100, 2), meanactual=round(mean(dv)*100, 2))
grp_lr <- group_by(df, decile_lr)
average_pobability_lr<-summarise(grp_lr, meanrisk_lr=round(mean(lr_pred)*100, 2), meanactual=round(mean(dv)*100, 2))
grp_xgb <- group_by(df, decile_xgb)
average_pobability_xgb<-summarise(grp_xgb, meanrisk_xgb=round(mean(xgb_pred)*100, 2), meanactual=round(mean(dv)*100, 2))
write.csv(average_pobability_lr, "/Users/briansaindon/Desktop/ableto/results/scored/avg_prob_lr.csv")
write.csv(average_pobability_xgb, "/Users/briansaindon/Desktop/ableto/results/scored/avg_prob_xgb.csv")
model.data.reduced <-  model.data[ c(3, 5, 7, 9, 11, 14, 15, 18, 19, 35, 41, 43, 44, 51, 56, 57, 58, 61, 63, 64, 65, 66, 70, 72, 73, 75, 76, 80, 81, 82, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 101, 103, 105, 107, 108, 109, 113, 114, 118, 119, 121
) ]
model.data.reduced[is.na(model.data.reduced)] <- 0
set.seed(3456)
trainIndex <- createDataPartition(model.data.reduced$readmitted_dv, p = .80,
list = FALSE,
times = 1)
model1train <- model.data.reduced[ trainIndex,]
model1test  <- model.data.reduced[-trainIndex,]
table(model.data.reduced$readmitted_dv)
logit.overall = glm(readmitted_dv ~ . ,
family = "binomial",
data = model1test)
summary(logit.overall)
prob <- predict(logit.overall1, newdata=model1test, type="response")
pred <- prediction(prob, model1test$readmitted_dv )
perftrain <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perftrain)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
setwd("github_repos/readmission-predictions/")
setwd("github_repos/readmission-predictions/")
